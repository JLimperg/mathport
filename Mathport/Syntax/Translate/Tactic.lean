/-
Copyright (c) 2021 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mario Carneiro
-/
import Mathport.Syntax.Translate.Tactic.Lean3
import Mathport.Syntax.Translate.Tactic.Mathlib

open Lean
open Lean.Elab.Tactic (Location)

namespace Mathport
namespace Translate
namespace Tactic

open AST3 Parser Lean.Elab.Command

def builtinTactics : M (NameMap (Array (Spanned AST3.Param) → CommandElabM Syntax)) := mkTacMap [
  (`propagate_tags,      trPropagateTags),
  (`intro,               trIntro),
  (`intros,              trIntros),
  (`introv,              trIntrov),
  (`rename,              trRename),
  (`apply,               trApply),
  (`fapply,              trFApply),
  (`eapply,              trEApply),
  (`apply_with,          trApplyWith),
  (`mapply,              trMApply),
  (`apply_instance,      trApplyInstance),
  (`refine,              trRefine),
  (`assumption,          trAssumption),
  (`assumption',         trAssumption'),
  (`change,              trChange),
  (`exact,               trExact),
  (`from,                trExact),
  (`revert,              trRevert),
  (`to_expr',            trToExpr'),
  (`rewrite,             trRw),
  (`rw,                  trRw),
  (`rwa,                 trRwA),
  (`erewrite,            trERw),
  (`erw,                 trERw),
  (`with_cases,          trWithCases),
  (`generalize,          trGeneralize),
  (`induction,           trInduction),
  (`case,                trCase),
  (`destruct,            trDestruct),
  (`cases,               trCases),
  (`cases_matching,      trCasesM),
  (`casesm,              trCasesM),
  (`cases_type,          trCasesType),
  (`trivial,             trTrivial),
  (`admit,               trSorry),
  (`sorry,               trSorry),
  (`contradiction,       trContradiction),
  (`iterate,             trIterate),
  (`repeat,              trRepeat),
  (`try,                 trTry),
  (`skip,                trSkip),
  (`solve1,              trSolve1),
  (`abstract,            trAbstract),
  (`all_goals,           trAllGoals),
  (`any_goals,           trAnyGoals),
  (`focus,               trFocus),
  (`assume,              trAssume),
  (`have,                trHave),
  (`let,                 trLet),
  (`suffices,            trSuffices),
  (`trace_state,         trTraceState),
  (`trace,               trTrace),
  (`existsi,             trExistsI),
  (`constructor,         trConstructor),
  (`econstructor,        trEConstructor),
  (`left,                trLeft),
  (`right,               trRight),
  (`split,               trSplit),
  (`contructor_matching, trConstructorM),
  (`exfalso,             trExFalso),
  (`injection,           trInjection),
  (`injections,          trInjections),
  (`simp,                trSimp),
  (`trace_simp_set,      trTraceSimpSet),
  (`simp_intros,         trSimpIntros),
  (`dsimp,               trDSimp),
  (`reflexivity,         trRefl),
  (`refl,                trRefl),
  (`symmetry,            trSymmetry),
  (`transitivity,        trTransitivity),
  (`ac_reflexivity,      trACRefl),
  (`ac_refl,             trACRefl),
  (`cc,                  trCC),
  (`subst,               trSubst),
  (`subst_vars,          trSubstVars),
  (`clear,               trClear),
  (`dunfold,             trDUnfold),
  (`delta,               trDelta),
  (`unfold_projs,        trUnfoldProjs),
  (`unfold,              trUnfold),
  (`unfold1,             trUnfold1),
  (`apply_opt_param,     trApplyOptParam),
  (`apply_auto_param,    trApplyAutoParam),
  (`fail_if_success,     trFailIfSuccess),
  (`success_if_fail,     trFailIfSuccess),
  (`guard_expr_eq,       trGuardExprEq),
  (`guard_target,        trGuardTarget),
  (`guard_hyp,           trGuardHyp),
  (`match_target,        trMatchTarget),
  (`by_cases,            trByCases),
  (`funext,              trFunext),
  (`by_contradiction,    trByContra),
  (`by_contra,           trByContra),
  (`type_check,          trTypeCheck),
  (`done,                trDone),
  (`show,                trShow),
  (`specialize,          trSpecialize),
  (`congr,               trCongr),
  (`rsimp,               trRSimp),
  (`async,               trAsync),
  (`comp_val,            trCompVal),
  (`conv,                trConv),
  (`min_tac,             trMinTac),
  (`rcases,              trRCases),
  (`rintro,              trRIntro),
  (`rintros,             trRIntro),
  (`obtain,              trObtain)]

def builtinUserNotation : M (NameMap (Array (Spanned AST3.Param) → CommandElabM Syntax)) := mkTacMap [
  (`format_macro, trFormatMacro),
  (`sformat_macro, trSFormatMacro)]
